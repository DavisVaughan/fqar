data_set[1, 1] <- "Title"
data_set[2, 2] <- data_set[2, 1]
data_set[2, 1] <- "Date"
data_set[3, 2] <- data_set[3, 1]
data_set[3, 1] <- "Site Name"
data_set[4, 2] <- data_set[4, 1]
data_set[4, 1] <- "City"
data_set[5, 2] <- data_set[5, 1]
data_set[5, 1] <- "County"
data_set[6, 2] <- data_set[6, 1]
data_set[6, 1] <- "State"
data_set[7, 2] <- data_set[7, 1]
data_set[7, 1] <- "Country"
data_set[8, 2] <- data_set[8, 1]
data_set[8, 1] <- "Omernik Level 3 Ecoregion"
data_set <- na_if(data_set, "n/a")
data_set <- na_if(data_set, "")
view(data_set)
data_set <- trans_man
view(data_set)
new <- rbind(names(data_set), data_set)
data_set <- separate(new,
col = 1,
sep = ",",
into = paste0("V", 1:15),
fill = "right")
view(data_set)
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "Custom FQA DB Name")
expect_equal(names(test_normal)[11], "FQA DB Region")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "Custom FQA DB Name")
expect_equal(names(test_custom)[11], "FQA DB Region")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "Custom FQA DB Name")
expect_equal(names(test_omernik)[11], "FQA DB Region")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
trans_normal <- download_transect(4492)
view(trans_normal)
download_transect(4492) |>
transect_glance()
download_transect(4492) |>
transect_glance() |> view()
download_transect(4492) |>
transect_glance() |> view()
data_set <- trans_man
new <- rbind(names(data_set), data_set)
data_set <- separate(new,
col = 1,
sep = ",",
into = paste0("V", 1:15),
fill = "right")
view(data_set)
trans_man <- read_csv("~/Downloads/FQA(16).csv")
view(trans_man)
data_set <- trans_man
new <- rbind(names(data_set), data_set)
view(nwe)
view(new)
data_set <- separate(new,
col = 1,
sep = ",",
into = paste0("V", 1:15),
fill = "right")
view(data_set)
data_set[1, 2] <- data_set[1, 1]
data_set[1, 1] <- "Title"
data_set[2, 2] <- data_set[2, 1]
data_set[2, 1] <- "Date"
data_set[3, 2] <- data_set[3, 1]
data_set[3, 1] <- "Site Name"
data_set[4, 2] <- data_set[4, 1]
data_set[4, 1] <- "City"
data_set[5, 2] <- data_set[5, 1]
data_set[5, 1] <- "County"
data_set[6, 2] <- data_set[6, 1]
data_set[6, 1] <- "State"
data_set[7, 2] <- data_set[7, 1]
data_set[7, 1] <- "Country"
data_set[8, 2] <- data_set[8, 1]
data_set[8, 1] <- "Omernik Level 3 Ecoregion"
view(data_set)
data_set <- na_if(data_set, "n/a")
data_set <- na_if(data_set, "")
renamed <- data_set |>
rename("one" = 1,
"two" = 2)
dropped <- renamed |> drop_na(1) |>
filter(.data$one != "Conservatism-Based Metrics:",
.data$one != "Species Richness:",
.data$one != "Duration Metrics:",
.data$one != "Species Wetness:")
cut <- dropped |>
filter(row_number() < which(.data$`one` == "Physiognomic Relative Importance Values:"))
selected <- cut |> select(1:2)
if (selected[9, 1] == "FQA DB Region:") {
new_rows <- data.frame(one = c("Custom FQA DB Name",
"Custom FQA DB Description"),
two = c(NA, NA))
selected <- rbind(selected[1:8, ], new_rows, selected[-(1:8), ])
}
selected[11:14, 1] <- gsub("Original ", "", selected[11:14, 1])
selected[28, 2] <- gsub("m", "", selected[28, 2])
pivoted <- selected |> pivot_wider(names_from = .data$one,
values_from = .data$two)
view(cut)
selected <- cut |> select(1:2)
view(selected)
if (selected[9, 1] == "FQA DB Region:") {
new_rows <- data.frame(one = c("Custom FQA DB Name",
"Custom FQA DB Description"),
two = c(NA, NA))
selected <- rbind(selected[1:8, ], new_rows, selected[-(1:8), ])
}
view(selected)
selected <- cut |> select(1:2)
if (selected[9, 1] == "FQA DB Region:") {
new_rows <- data.frame(one = c("Custom FQA DB Name",
"Custom FQA DB Description"),
two = c(NA, NA))
selected <- rbind(selected[1:12, ], new_rows, selected[-(1:12), ])
}
view(selected)
selected[9:12, 1] <- gsub("Original ", "", selected[9:12, 1])
view(selected)
cut <- dropped |>
filter(row_number() < which(.data$`one` == "Physiognomic Relative Importance Values:"))
selected <- cut |> select(1:2)
view(selected)
new_rows <- data.frame(one = c("Custom FQA DB Name",
"Custom FQA DB Description"),
two = c(NA, NA))
selected <- rbind(selected[1:12, ], new_rows, selected[-(1:12), ])
view(selected)
selected[9:12, 1] <- gsub("Original ", "", selected[9:12, 1])
view(selected)
selected <- cut |> select(1:2)
new_rows <- data.frame(one = c("Custom FQA DB Name",
"Custom FQA DB Description"),
two = c(NA, NA))
selected <- rbind(selected[1:12, ], new_rows, selected[-(1:12), ])
view(selected)
?gsub
selected[9:12, 1] <- gsub("Original ", "", selected[9:12, 1])
?gsub
view(selected)
selected <- cut |> select(1:2)
if (selected[9, 1] == "FQA DB Region:") {
new_rows <- data.frame(one = c("Custom FQA DB Name",
"Custom FQA DB Description"),
two = c(NA, NA))
selected <- rbind(selected[1:12, ], new_rows, selected[-(1:12), ])
}
view(selected)
selected[9:12, 1]
selected[9:12, 1] <- gsub("Original ", "", selected[9:12, 1])
selected <- cut |> select(1:2)
if (selected[9, 1] == "FQA DB Region:") {
new_rows <- data.frame(one = c("Custom FQA DB Name",
"Custom FQA DB Description"),
two = c(NA, NA))
selected <- rbind(selected[1:12, ], new_rows, selected[-(1:12), ])
}
gsub("Original ", "", selected[9:12, 1])
selected[9:12, 1]
gsub("Original", "", selected[9:12, 1])
selected[9:12, 1]
v <- selected[9:12, 1]
v
gsub("F", "f", v)
selected[28, 2]
cut <- dropped |>
filter(row_number() < which(.data$`one` == "Physiognomic Relative Importance Values:"))
selected <- cut |> select(1:2)
if (selected[9, 1] == "FQA DB Region:") {
new_rows <- data.frame(one = c("Custom FQA DB Name",
"Custom FQA DB Description"),
two = c(NA, NA))
selected <- rbind(selected[1:12, ], new_rows, selected[-(1:12), ])
}
selected$one <- gsub("Original ", "", selected$one)
selected$two[28] <- sub("m", "", selected$two[28])
pivoted <- selected |> pivot_wider(names_from = .data$one,
values_from = .data$two)
data <- pivoted |> mutate(across(c(26:28, 32:54), as.numeric),
Date = as.POSIXct(.data$Date))
t <- transect_glance(trans_man)
view(selected)
load_all()
t <- transect_glance(trans_man)
load_all()
t <- transect_glance(trans_man)
load_all()
t <- transect_glance(trans_man)
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "Custom FQA DB Name")
expect_equal(names(test_normal)[11], "FQA DB Region")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "Custom FQA DB Name")
expect_equal(names(test_custom)[11], "FQA DB Region")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "Custom FQA DB Name")
expect_equal(names(test_omernik)[11], "FQA DB Region")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
test_normal <- download_transect(4492) |>
transect_glance()
view(test_normal)
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Description")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
test_normal <- download_transect(4492) |>
transect_glance()
view(test_normal)
test_custom <- download_transect(7025) |>
transect_glance()
view(test_custom)
load_all()
test_custom <- download_transect(7025) |>
transect_glance()
view(test_custom)
test_custom <- download_transect(7025) |>
transect_glance()
view(test_custom)
data_set <- trans_custom
data_set <- download_transect(7025)
data_set[1, 2] <- data_set[1, 1]
data_set[1, 1] <- "Title"
data_set[2, 2] <- data_set[2, 1]
data_set[2, 1] <- "Date"
data_set[3, 2] <- data_set[3, 1]
data_set[3, 1] <- "Site Name"
data_set[4, 2] <- data_set[4, 1]
data_set[4, 1] <- "City"
data_set[5, 2] <- data_set[5, 1]
data_set[5, 1] <- "County"
data_set[6, 2] <- data_set[6, 1]
data_set[6, 1] <- "State"
data_set[7, 2] <- data_set[7, 1]
data_set[7, 1] <- "Country"
data_set[8, 2] <- data_set[8, 1]
data_set[8, 1] <- "Omernik Level 3 Ecoregion"
data_set <- na_if(data_set, "n/a")
data_set <- na_if(data_set, "")
renamed <- data_set |>
rename("V1" = 1,
"V2" = 2)
dropped <- renamed |> drop_na(1) |>
filter(.data$V1 != "Conservatism-Based Metrics:",
.data$V1 != "Species Richness:",
.data$V1 != "Duration Metrics:",
.data$V1 != "Species Wetness:")
cut <- dropped |>
filter(row_number() < which(.data$V1 == "Physiognomic Relative Importance Values:"))
selected <- cut |> select(1:2)
view(selected)
load_all()
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Description")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Name")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Name")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
document()
test()
test_that("assessment_list_glance works", {
test_vec <- c(25961, 25640)
test_list <- download_assessment_list(63, id %in% test_vec)
output_df <- assessment_list_glance(test_list)
expect_equal(ncol(output_df), 52)
expect_equal(typeof(output_df$`Total Mean C`), "double")
expect_gt(nrow(output_df), 1)
})
test_that("assessment_glance works", {
expect_error(assessment_glance("hi"))
expect_error(assessment_glance(faithful))
test_raw <- download_assessment(25002)
test <- assessment_glance(test_raw)
expect_equal(ncol(test), 52)
expect_equal(nrow(test), 1)
expect_equal(names(test)[8], "FQA DB Region")
expect_equal(names(test)[42], "Grass")
expect_equal(typeof(test$`Total Mean C`), "double")
})
t ,- transect_glance(download_transect(6325))
t <- transect_glance(download_transect(6325))
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Name")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
test_that("transect_list_glance works", {
expect_error(transect_list_glance("hi"))
test_vec <- c(6875, 6736)
test_list <- download_transect_list(63, id %in% test_vec)
test <- transect_list_glance(test_list)
expect_equal(ncol(test), 54)
expect_equal(typeof(test$`Total Mean C`), "double")
expect_equal(nrow(test), 2)
})
load_all()
test)
test()
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Name")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
library(devtools)
check()
load_all()
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Name")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
test_that("transect_inventory works", {
expect_error(transect_inventory("hi"))
test <- download_transect(25002)
test <- transect_inventory(test)
expect_equal(ncol(test), 13)
expect_equal(typeof(test$C), "double")
})
test_that("transect_phys works", {
expect_error(transect_phys("hi"))
test <- download_transect(25002)
test <- transect_phys(test)
expect_equal(ncol(test), 6)
expect_equal(typeof(test$Frequency), "double")
})
test_that("transect_list_glance works", {
expect_error(transect_list_glance("hi"))
test_vec <- c(6875, 6736)
test_list <- download_transect_list(63, id %in% test_vec)
test <- transect_list_glance(test_list)
expect_equal(ncol(test), 54)
expect_equal(typeof(test$`Total Mean C`), "double")
expect_equal(nrow(test), 2)
})
test_normal <- download_transect(4492) |>
transect_glance()
