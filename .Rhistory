expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
document()
test()
test_that("assessment_list_glance works", {
test_vec <- c(25961, 25640)
test_list <- download_assessment_list(63, id %in% test_vec)
output_df <- assessment_list_glance(test_list)
expect_equal(ncol(output_df), 52)
expect_equal(typeof(output_df$`Total Mean C`), "double")
expect_gt(nrow(output_df), 1)
})
test_that("assessment_glance works", {
expect_error(assessment_glance("hi"))
expect_error(assessment_glance(faithful))
test_raw <- download_assessment(25002)
test <- assessment_glance(test_raw)
expect_equal(ncol(test), 52)
expect_equal(nrow(test), 1)
expect_equal(names(test)[8], "FQA DB Region")
expect_equal(names(test)[42], "Grass")
expect_equal(typeof(test$`Total Mean C`), "double")
})
t ,- transect_glance(download_transect(6325))
t <- transect_glance(download_transect(6325))
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Name")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
test_that("transect_list_glance works", {
expect_error(transect_list_glance("hi"))
test_vec <- c(6875, 6736)
test_list <- download_transect_list(63, id %in% test_vec)
test <- transect_list_glance(test_list)
expect_equal(ncol(test), 54)
expect_equal(typeof(test$`Total Mean C`), "double")
expect_equal(nrow(test), 2)
})
load_all()
test)
test()
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Name")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
library(devtools)
check()
load_all()
test_that("transect_glance works", {
expect_error(transect_glance("hi"))
test_normal <- download_transect(4492) |>
transect_glance()  # 4492 is ordinary
expect_equal(ncol(test_normal), 54)
expect_equal(nrow(test_normal), 1)
expect_equal(names(test_normal)[9], "FQA DB Region")
expect_equal(names(test_normal)[13], "Custom FQA DB Name")
expect_equal(typeof(test_normal$`Total Mean C`), "double")
test_custom <- download_transect(7025) |>
transect_glance()  # 7025 is custom
expect_equal(ncol(test_custom), 54)
expect_equal(nrow(test_custom), 1)
expect_equal(names(test_custom)[9], "FQA DB Region")
expect_equal(names(test_custom)[13], "Custom FQA DB Name")
expect_equal(typeof(test_custom$`Total Mean C`), "double")
test_omernik <- download_transect(6444) |>
transect_glance()  # 6444 includes an omernik classification
expect_equal(ncol(test_omernik), 54)
expect_equal(nrow(test_omernik), 1)
expect_equal(names(test_omernik)[9], "FQA DB Region")
expect_equal(names(test_omernik)[13], "Custom FQA DB Name")
expect_equal(typeof(test_omernik$`Total Mean C`), "double")
})
test_that("transect_inventory works", {
expect_error(transect_inventory("hi"))
test <- download_transect(25002)
test <- transect_inventory(test)
expect_equal(ncol(test), 13)
expect_equal(typeof(test$C), "double")
})
test_that("transect_phys works", {
expect_error(transect_phys("hi"))
test <- download_transect(25002)
test <- transect_phys(test)
expect_equal(ncol(test), 6)
expect_equal(typeof(test$Frequency), "double")
})
test_that("transect_list_glance works", {
expect_error(transect_list_glance("hi"))
test_vec <- c(6875, 6736)
test_list <- download_transect_list(63, id %in% test_vec)
test <- transect_list_glance(test_list)
expect_equal(ncol(test), 54)
expect_equal(typeof(test$`Total Mean C`), "double")
expect_equal(nrow(test), 2)
})
test_normal <- download_transect(4492) |>
transect_glance()
library(devtools)
library(tidyverse)
library(testthat)
test()
test()
load_all()
databases <- download_fqa_databases()
view(databases)
assessments <- download_assessment_list(12)
assessments_tidy <- lapply(assessments, assessment_glance)
sapply(assessments_tidy, ncol)
sapply(assessments, nrow)
view(assessments[[1]])
trana <- download_transect_list(12)
view(trana[[1]])
library(tidyverse)
library(devtools)
load_all()
databases <- download_fqa_databases()
view(databases)
assessements <- download_fqa_assessments(63)
view(assessments)
assessments <- assessements
view(assessments)
missouri <- assessment_list_glance(assessments)
t <- assessment_glance(assessment[[1]])
t <- assessment_glance(assessments[[1]])
view(assessments[[1]])
assessments <- download_assessment_list(database = 63)
missouri <- assessment_list_glance(assessments)
rm(assessements)
names(assessments)
names(missouri)
names(missouri)
document()
t <- download_assessment(25002)
view(t)
document()
view(missouri)
document()
document()
load_all()
missouri <- assessment_list_glance(assessments)
test <- read_csv("~/Downloads/FQA(6).csv")
gl <- assessment_glance(test)
view(gl)
test <- read_csv("~/Downloads/FQA(7).csv")
gl <- assessment_glance(test)
view(gl)
test <- read_csv("~/Downloads/FQA(8).csv")
gl <- assessment_glance(test)
data_set <- test
view(test)
new <- rbind(names(data_set), data_set)
data_set <- separate(new,
col = 1,
sep = ",",
into = c("V1", "V2", "V3", "V4",
"V5", "V6", "V7", "V8", "V9"),
fill = "right")
data_set <- na_if(data_set, "n/a")
data_set <- na_if(data_set, "")
view(data_set)
data_set[1, 2] <- data_set[1, 1]
data_set[1, 1] <- "Title:"
data_set[2, 2] <- data_set[2, 1]
data_set[2, 1] <- "Date:"
data_set[3, 2] <- data_set[3, 1]
data_set[3, 1] <- "Site Name:"
data_set[4, 2] <- data_set[4, 1]
data_set[4, 1] <- "City:"
data_set[5, 2] <- data_set[5, 1]
data_set[5, 1] <- "County:"
data_set[6, 2] <- data_set[6, 1]
data_set[6, 1] <- "State:"
data_set[7, 2] <- data_set[7, 1]
data_set[7, 1] <- "Country:"
view(data_set)
names(data_set)[1:2] <- c("V1", "V2")
selected <- data_set |>
select(1:2) |>
drop_na(1)
view(selected)
selected[1:12, ] <- selected[c(1:7, 10:12, 8:9), ]
selected[1] <- gsub("Original ", "", selected[1])
view(selected)
view(selected)
selected <- data_set |>
select(1:2) |>
drop_na(1)
view(selected)
selected[1:12, ] <- selected[c(1:7, 10:12, 8:9), ]
selected$V1 <- gsub("Original ", "", selected$V1)
view(selected)
load_all()
gl <- assessment_glance(test)
view(gl)
view(missouri)
sum(!ins.na(missouri$`Custom FQA DB Name`))
sum(!is.na(missouri$`Custom FQA DB Name`))
View(databases)
view(databases)
chic <- download_assessment_list(database = 1)
gl <- assessment_list_glance(chic)
view(gl)
sum(!is.na(chic$`Custom FQA DB Name`))
view(databases)
ont <- download_assessment_list(database = 2)
gl <- assessment_list_glance(ont)
sum(!is.na(ont$`Custom FQA DB Name`))
test_list <- download_assessment_list(database = 23)
gl <- assessment_list_glance(test_list)
sum(!is.na(gl$`Custom FQA DB Name`))
test_list <- download_assessment_list(database = 24)
gl <- assessment_list_glance(test_list)
t <- assessment_glance(test_list[[1]])
t <- assessment_glance(test_list[[2]])
t <- assessment_glance(test_list[[3]])
t <- assessment_glance(test_list[[4]])
t <- assessment_glance(test_list[[5]])
t <- assessment_glance(test_list[[6]])
t <- assessment_glance(test_list[[7]])
t <- assessment_glance(test_list[[8]])
t <- assessment_glance(test_list[[9]])
view(test_list[[9]])
load_all()
t <- assessment_glance(test_list[[9]])
load_all()
t <- assessment_glance(test_list[[9]])
view(t)
gl <- assessment_list_glance(test_list)
view(gl)
test_list <- download_assessment_list(database = 23)
test_list <- download_assessment_list(database = 24)
gl <- assessment_list_glance(test_list)
sum(!is.na(gl$`Custom FQA DB Name`))
test_list <- download_assessment_list(database = 29)
gl <- assessment_list_glance(test_list)
sum(!is.na(gl$`Custom FQA DB Name`))
test_list <- download_assessment_list(database = 63)
gl <- assessment_list_glance(test_list)
sum(!is.na(gl$`Custom FQA DB Name`))
view(gl)
test_list <- download_assessment_list(database = 50)
test_list <- download_assessment_list(database = 43)
gl <- assessment_list_glance(test_list)
sum(!is.na(gl$`Custom FQA DB Name`))
test_list <- download_assessment_list(database = 149)
gl <- assessment_list_glance(test_list)
sum(!is.na(gl$`Custom FQA DB Name`))
test_list <- download_assessment_list(database = 50)
t <- download_fqa_assessments(50)
ir <- na_if(iris, c("Setosa"))
view(ir)
ir <- na_if(iris, c("setosa"))
view(ir)
ir <- na_if(iris, c(1.4, 1.5))
?na_if
na_if(1:5, 5:1)
use_test("assessment_glance")
load_all()
test_that("assessment_glance works", {
expect_error(assessment_glance("hi"))
expect_error(assessment_glance(faithful))
test_raw <- download_assessment(25002)
test <- assessment_glance(test_raw)
expect_equal(ncol(test), 52)
expect_equal(nrow(test), 1)
expect_equal(names(test)[8], "FQA DB Region")
expect_equal(names(test)[42], "Grass")
expect_equal(typeof(test$`Total Mean C`), "double")
})
load_all()
test()
document()
?assessment_glance
document()
df <- download_transect(6325)
df <- download_transect(6325)
view(df)
document()
?assessment_glance
instsall()
install()
?missouri
?assessment_glance
?download_fqadatabases
?download_fqa_databases
?download_fqa_assessments
document()
load_all()
?download_fqa_assessments
install()
?download_fqa_assessments
?download_fqa_databases
?filter
data_set <- assessments[[1]]
?assessment_inventory
view(assessment_inventory(data_set))
edison <- download_fqa(25002)
edison <- download_assessment(25002)
edison <- download_assessment(25002)
edison <- download_assessment(25002)
edison <- download_assessment(25002)
assessment_inventory(edison)
test <- assessment_glance(edison)
class(assessment_glance())
class(test)
test
test <- assessment_inventory(edison)
class(test)
load_all()
edison <- download_assessment(25002)
test <- assessment_inventory(edison)
str(test)
class(test)
data_set <- edison
class(data_set)
load_all()
test_that("assessment_inventory works", {
expect_error(assessment_inventory("hi"))
test <- download_assessment(25002)
test <- assessment_inventory(test)
expect_equal(ncol(test), 9)
expect_equal(typeof(test$C), "double")
})
test <- download_assessment(25002)
test_raw <- download_assessment(25002)
test <- assessment_inventory(test_raw)
load_all()
test_that("assessment_inventory works", {
expect_error(assessment_inventory("hi"))
test_raw <- download_assessment(25002)
test <- assessment_inventory(test_raw)
expect_equal(ncol(test), 9)
expect_equal(typeof(test$C), "double")
})
edison <- download_assessment(25002)
assessment_inventory(edison)
assessment_inventory(edison)
load_all()
t <- assessment_inventory(edison)
class(t)
t
load_all()
t <- assessment_inventory(edison)
t
test_that("transect_inventory works", {
expect_error(transect_inventory("hi"))
test <- download_transect(25002)
test <- transect_inventory(test)
expect_equal(ncol(test), 13)
expect_equal(typeof(test$C), "double")
})
data_set <- download_transect(6325)
view9data_set
view(data_set)
renamed <- data_set |>
rename("one" = 1,
"two" = 2,
"three" = 3,
"four" = 4,
"five" = 5,
"six" = 6,
"seven" = 7,
"eight" = 8,
"nine" = 9,
"ten" = 10,
"eleven" = 11,
"twelve" = 12,
"thirteen" = 13,
"fourteen" = 14)
selected <- renamed |> select(1:13)
data_set <- separate(new,
col = 1,
sep = ",",
into = paste0("V", 1:9),
fill = "right")
view(data_set)
trans_list <- download_transect_list(database = 1)
trans_list <- download_transect_list(database = 10)
sapply(trans_list, ncol)
view(trans_list[[1]])
t <- transect_inventory(trans_list[[1]])
view(t)
t <- transect_inventory(trans_list[[2]])
view(t)
t <- transect_inventory(trans_list[[3]])
view(t)
t <- lapply(trans_list, transect_inventory)
t <- transect_inventory(trans_list[[4]])
view(t)
t <- transect_inventory(trans_list[[5]])
t <- transect_inventory(trans_list[[6]])
t <- transect_inventory(trans_list[[7]])
data_set <- transect_list[[7]]
data_set <- trans_list[[7]]
viwe(data-set)
viwe(data_set)
view(data_set)
data_set <- transect_list[[6]]
data_set <- trans_list[[6]]
view(data_set)
start_row <- which(data_set$V1 == "Species Relative Importance Values:")
end_row <- which(data_set$V1 == "Quadrat/Subplot Level Metrics:")
start_row
end_row
view(data_set)
start_row <- 1 + which(data_set$V1 == "Species Relative Importance Values:")
start_row
data <- selected |>
filter(row_number() > which(.data$V1 == "Species Relative Importance Values:")) |>
filter(row_number() < which(.data$V1 == "Quadrat/Subplot Level Metrics:"))
end_row <- -2 + which(data_set$V1 == "Quadrat/Subplot Level Metrics:")
end_row
data_set <- trans_list[[7]]
view(data_set)
data_set_bad <- trans_list[[7]]
data_set_good <- trans_list[[6]]
view(data_set_bad)
view(data_set_good)
129-77
191 - 139
data_set <- trans_list[[8]]
t <- transect_inventory(data_set)
data_set <- trans_list[[7]]
t <- transect_inventory(data_set)
databases
view(databases)
trans <- download_transect_list(63)
trans <- download_transect_list(56)
data_set <- trans[[1]]
t <- transect_inventory[[1]]
t <- transect_inventory(trans[[1]])
t <- transect_inventory(trans[[2]])
view(trans[[1]])
?drop_na
view(data_set)
t <- transect_inventory(data_set)
load_all()
t <- transect_inventory(data_set)
data_set <- na_if(data_set, "n/a")
data_set <- na_if(data_set, "")
view(data_set)
data_set <- data_set |> select(1:13)
start_row <- 1 + which(data_set$V1 == "Species Relative Importance Values:")
end_row <- -2 + which(data_set$V1 == "Quadrat/Subplot Level Metrics:")
start_row
end_row
dropped <- data_set[start_row:end_row, ]
view(dropped)
names(dropped) <- lapply(dropped[1, ], as.character)
view(dropped)
dropped <- dropped[-1, ]
view(dropped)
new <- dropped |> mutate(across(c(5:6, 9:13), as.double))
load_all()
t <- transect_inventory(data_set_good)
view(t)
load_all()
t <- transect_inventory(data_set_good)
view(t)
t <- transect_inventory(data_set_bad)
view(t)
t <- transect_inventory(data_set_good)
view(t)
